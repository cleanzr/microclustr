// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// loglikxSP
double loglikxSP(NumericVector betas, IntegerMatrix x, IntegerVector z, List params);
RcppExport SEXP _microclustr_loglikxSP(SEXP betasSEXP, SEXP xSEXP, SEXP zSEXP, SEXP paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type betas(betasSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikxSP(betas, x, z, params));
    return rcpp_result_gen;
END_RCPP
}
// logsumexp
double logsumexp(double a, double b);
RcppExport SEXP _microclustr_logsumexp(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(logsumexp(a, b));
    return rcpp_result_gen;
END_RCPP
}
// unislicespb1
NumericVector unislicespb1(NumericVector betas, IntegerMatrix x, IntegerVector z, List params, NumericVector hpriords, double w, int m, double lower, double upper, NumericVector x1, int N, int Khat, IntegerVector Nk, NumericVector hpriorpar, std::string Prior);
RcppExport SEXP _microclustr_unislicespb1(SEXP betasSEXP, SEXP xSEXP, SEXP zSEXP, SEXP paramsSEXP, SEXP hpriordsSEXP, SEXP wSEXP, SEXP mSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP x1SEXP, SEXP NSEXP, SEXP KhatSEXP, SEXP NkSEXP, SEXP hpriorparSEXP, SEXP PriorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type betas(betasSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hpriords(hpriordsSEXP);
    Rcpp::traits::input_parameter< double >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type Khat(KhatSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Nk(NkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hpriorpar(hpriorparSEXP);
    Rcpp::traits::input_parameter< std::string >::type Prior(PriorSEXP);
    rcpp_result_gen = Rcpp::wrap(unislicespb1(betas, x, z, params, hpriords, w, m, lower, upper, x1, N, Khat, Nk, hpriorpar, Prior));
    return rcpp_result_gen;
END_RCPP
}
// unislicem
NumericVector unislicem(NumericVector x1, int N, int Khat, double lx, IntegerVector Nk, NumericVector hpriorpar, double w, int m, NumericVector lo, NumericVector up, std::string Prior, IntegerVector samind);
RcppExport SEXP _microclustr_unislicem(SEXP x1SEXP, SEXP NSEXP, SEXP KhatSEXP, SEXP lxSEXP, SEXP NkSEXP, SEXP hpriorparSEXP, SEXP wSEXP, SEXP mSEXP, SEXP loSEXP, SEXP upSEXP, SEXP PriorSEXP, SEXP samindSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type Khat(KhatSEXP);
    Rcpp::traits::input_parameter< double >::type lx(lxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Nk(NkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hpriorpar(hpriorparSEXP);
    Rcpp::traits::input_parameter< double >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lo(loSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type up(upSEXP);
    Rcpp::traits::input_parameter< std::string >::type Prior(PriorSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type samind(samindSEXP);
    rcpp_result_gen = Rcpp::wrap(unislicem(x1, N, Khat, lx, Nk, hpriorpar, w, m, lo, up, Prior, samind));
    return rcpp_result_gen;
END_RCPP
}
// unislicemESCD
NumericVector unislicemESCD(NumericVector x1, double lx, IntegerVector Lm, NumericVector mu0, NumericVector hpriorpar, double w, int m, NumericVector lo, NumericVector up, IntegerVector samind);
RcppExport SEXP _microclustr_unislicemESCD(SEXP x1SEXP, SEXP lxSEXP, SEXP LmSEXP, SEXP mu0SEXP, SEXP hpriorparSEXP, SEXP wSEXP, SEXP mSEXP, SEXP loSEXP, SEXP upSEXP, SEXP samindSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< double >::type lx(lxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Lm(LmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hpriorpar(hpriorparSEXP);
    Rcpp::traits::input_parameter< double >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lo(loSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type up(upSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type samind(samindSEXP);
    rcpp_result_gen = Rcpp::wrap(unislicemESCD(x1, lx, Lm, mu0, hpriorpar, w, m, lo, up, samind));
    return rcpp_result_gen;
END_RCPP
}
// Web_SamplerSP
IntegerMatrix Web_SamplerSP(IntegerMatrix data_, IntegerVector assignments, NumericVector A, NumericVector B, NumericVector distortions, List params, int n_samples, int spacing);
RcppExport SEXP _microclustr_Web_SamplerSP(SEXP data_SEXP, SEXP assignmentsSEXP, SEXP ASEXP, SEXP BSEXP, SEXP distortionsSEXP, SEXP paramsSEXP, SEXP n_samplesSEXP, SEXP spacingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type data_(data_SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type assignments(assignmentsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type distortions(distortionsSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< int >::type spacing(spacingSEXP);
    rcpp_result_gen = Rcpp::wrap(Web_SamplerSP(data_, assignments, A, B, distortions, params, n_samples, spacing));
    return rcpp_result_gen;
END_RCPP
}
// Web_SamplerSP_fbl
IntegerMatrix Web_SamplerSP_fbl(IntegerMatrix data_, IntegerVector assignments, IntegerVector bl, NumericVector A, NumericVector B, NumericVector distortions, List params, int n_samples, int spacing);
RcppExport SEXP _microclustr_Web_SamplerSP_fbl(SEXP data_SEXP, SEXP assignmentsSEXP, SEXP blSEXP, SEXP ASEXP, SEXP BSEXP, SEXP distortionsSEXP, SEXP paramsSEXP, SEXP n_samplesSEXP, SEXP spacingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type data_(data_SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type assignments(assignmentsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type bl(blSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type distortions(distortionsSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< int >::type spacing(spacingSEXP);
    rcpp_result_gen = Rcpp::wrap(Web_SamplerSP_fbl(data_, assignments, bl, A, B, distortions, params, n_samples, spacing));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_microclustr_loglikxSP", (DL_FUNC) &_microclustr_loglikxSP, 4},
    {"_microclustr_logsumexp", (DL_FUNC) &_microclustr_logsumexp, 2},
    {"_microclustr_unislicespb1", (DL_FUNC) &_microclustr_unislicespb1, 15},
    {"_microclustr_unislicem", (DL_FUNC) &_microclustr_unislicem, 12},
    {"_microclustr_unislicemESCD", (DL_FUNC) &_microclustr_unislicemESCD, 10},
    {"_microclustr_Web_SamplerSP", (DL_FUNC) &_microclustr_Web_SamplerSP, 8},
    {"_microclustr_Web_SamplerSP_fbl", (DL_FUNC) &_microclustr_Web_SamplerSP_fbl, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_microclustr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
